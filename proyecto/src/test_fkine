#!/usr/bin/env python3
import rospy
from sensor_msgs.msg import JointState

from markers import *
from prfuncs import *

if __name__ == '__main__':

 rospy.init_node("testForwardKinematics")
 pub = rospy.Publisher('joint_states', JointState, queue_size=1)
 bmarker = BallMarker(color['GREEN'])
 marker = FrameMarker()
 
 # Joint names
 jnames = ['joint_1', 'joint_2', 'joint_3', 'joint_4', 'joint_5', 'joint_6']
 # Joint Configuration
 q = np.array([1.59, 0.39, -0.64, -1.68, 0.27, -1.79])

 # End effector with respect to the base
 T = fkine(q)
 #T = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) 
 print( np.round(T, 3) )
 bmarker.position(T)
 
 x0 = TF2xyzquat(T)
 # x0 = [0, 0, 0, 1, 0, 0, 0]
 marker.setPose(x0)

 # Object (message) whose type is JointState
 jstate = JointState()
 # Set values to the message
 jstate.header.stamp = rospy.Time.now()
 jstate.name = jnames
 # Add the head joint value (with value 0) to the joints
 jstate.position = q

 # Loop rate (in Hz)
 rate = rospy.Rate(20)
 # Continuous execution loop
 while not rospy.is_shutdown():
  # Current time (needed for ROS)
  jstate.header.stamp = rospy.Time.now()
  # Publish the message
  pub.publish(jstate)
  #bmarker.publish()
  marker.publish()
  # Wait for the next iteration
  rate.sleep()
